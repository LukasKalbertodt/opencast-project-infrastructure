# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
{% for worker in groups['workers'] %}
  worker.Worker("{{ hostvars[worker].inventory_hostname }}", "{{ hostvars[worker].password }}"),
{% endfor %}
]

worker_names = [
{% for worker in groups['workers'] %}
  "{{ hostvars[worker].inventory_hostname }}",
{% endfor %}
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

import requests
def get_community_members():
  r = requests.get("https://bitbucket.org/api/2.0/teams/opencast-community/members")
  data = r.json()
  member_uuids = []
  for user in data['values']:
    member_uuids.append(user['uuid'])
  return member_uuids

def approval_filter(pr, threshold):
  approves = 0
  community = get_community_members()
  for participant in pr['participants']:
    user = participant['user']
    if participant['approved'] and user['uuid'] in community:
      approves = approves + 1

  if approves < threshold:
    return False
  return True

upstream = changes.GitPoller(repourl="https://bitbucket.org/opencast-community/opencast.git",
                              branches=True,
                              pollinterval=120,
                              buildPushesWithNoCommits=True)

upstream_pull_requests = changes.BitbucketPullrequestPoller(
                              owner="opencast-community",
                              slug="opencast",
                              pollAtLaunch=True,
                              project='pulls',
                              pullrequest_filter=lambda pr : approval_filter(pr,1))

mine = changes.GitPoller(repourl="https://bitbucket.org/greg_logan/matterhorn.git",
                              branches=True,
                              pollinterval=120,
                              buildPushesWithNoCommits=True)

pull_requests = changes.BitbucketPullrequestPoller(
                              owner="greg_logan",
                              slug="matterhorn",
                              pollAtLaunch=True,
                              project='pulls',
                              pullrequest_filter=lambda pr : approval_filter(pr,1))


c['change_source'] = [mine, pull_requests, upstream, upstream_pull_requests]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

commits_develop = schedulers.AnyBranchScheduler(name="Commits - Develop",
                                                change_filter=util.ChangeFilter(branch='develop'),
                                                treeStableTimer=300,
                                                builderNames=["Develop Build"])

nightly_develop = schedulers.Nightly(name='Nightly - Develop',
                                     change_filter=util.ChangeFilter(branch='develop'),
                                     hour=3, onlyIfChanged=True,
                                     builderNames=["Develop Nightly"])


pullScheduler = schedulers.AnyBranchScheduler(name="Pull Requests",
                                                change_filter=util.ChangeFilter(project='pulls'),
                                                treeStableTimer=300,
                                                builderNames=["Develop Build"])


c['schedulers'] = [pullScheduler, commits_develop, nightly_develop]

for branch in ['3.x']:
  commits_branch = schedulers.AnyBranchScheduler(name="Commits - " + branch,
                                                  change_filter=util.ChangeFilter(branch_re='r/' + branch),
                                                  treeStableTimer=300,
                                                  builderNames=[branch + " Build"])

  nightly_branch = schedulers.Nightly(name='Nightly - ' + branch,
                                     change_filter=util.ChangeFilter(branch_re='r/' + branch),
                                     hour=3, onlyIfChanged=True,
                                     builderNames=[branch + " Nightly"])

  c['schedulers'].extend([commits_branch, nightly_branch])

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

checkout = steps.Git(repourl=util.Property('repository'),
                     mode='incremental', method='fresh')

prep = steps.ShellSequence(
              commands=[
                util.ShellArg(command=["rm", "-f", ".m2/repository.xml"],
                  flunkOnFailure=False),
                util.ShellArg(command=['mvn', '-B', '-V', '-Dmaven.repo.local=./.m2', 'dependency:go-offline', '-fn'],
                  logfile='deps')
              ], env={'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64'})

build = steps.ShellCommand(
              command=['mvn', '-B', '-V', '-Dmaven.repo.local=./.m2', 'clean', 'install', '-Pdist'],
              env={'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64'})

#Handy for testing
fakebuild = steps.ShellSequence(
              commands=[
                util.ShellArg(command=['mkdir', 'build'], logfile='mkdir'),
                util.ShellArg(command=['touch', 'build/foo'], flunkOnFailure=True, logfile='touch')
              ])

cobertura = steps.ShellSequence(
              commands=[
                util.ShellArg(command=['mvn', '-B', '-V', '-Dmaven.repo.local=./.m2', 'cobertura:cobertura', '-Daggregate=true', '-Pdist'],
                  flunkOnFailure=True, logfile='cobertura'),
                util.ShellArg(command=['tar', 'cvjf', 'build/cobertura.tar.bz2', 'target/site/cobertura'],
                  logfile='cobertura_compress')
              ], env={'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64'})

site = steps.ShellSequence(
              commands=[
                util.ShellArg(command=['mvn', '-B', '-V', '-Dmaven.repo.local=./.m2', 'site', '-Pdist'],
                  flunkOnFailure=True, logfile='site'),
                util.ShellArg(command=['tar', 'cvjf', 'build/site.tar.bz2', 'target/site'],
                  logfile='site_compress')
              ], env={'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64'})

debChecker = steps.SetPropertyFromCommand(command="[ -d debs ] && echo True || echo False", property="alreadyCloned")

def wasCloned(step):
  if step.getProperty("alreadyCloned") == "True":
    return True
  else:
    return False

def wasNotCloned(step):
  return not wasCloned(step)

def hideIfAlreadyCloned(results, step):
  return wasCloned(step)

def hideIfNotAlreadyCloned(results, step):
  return wasNotCloned(step)

debsClone = steps.ShellCommand(
                       command=['git', 'clone', 'https://bitbucket.org/greg_logan/debian_packaging.git', '--branch', util.Property('branch'), 'debs'],
                         flunkOnFailure=False, warnOnFailure=True, doStepIf=wasNotCloned, hideStepIf=hideIfAlreadyCloned)

debsUpdate = steps.ShellSequence(
              commands=[
                util.ShellArg(command=['git', 'fetch'],
                  flunkOnFailure=True, logfile='fetch'),
                util.ShellArg(command=['git', 'reset', '--hard', util.Interpolate('origin/%(prop:branch)s')], #We use reset here to get rid of other entries in the changelog
                  flunkOnFailure=True, logfile='checkout')
              ], workdir="build/debs", flunkOnFailure=False, warnOnFailure=True, doStepIf=wasCloned, hideStepIf=hideIfNotAlreadyCloned)

debsBuild = steps.ShellSequence(
              commands=[
                util.ShellArg(command=['cp', '-rv', '../../build', './'], logfile='copy'),
                util.ShellArg(command=['dch', '-R', '-D', 'unstable', '-u', 'low', '--empty', util.Interpolate('Build %(prop:revision)s')], #TODO: Set user for changelog.  Currently root <root@$buildnode>.
                  flunkOnFailure=False, warnOnFailure=True, logfile='dch'),
                util.ShellArg(command=['dpkg-buildpackage', '-b', '-us', '-uc'],
                  flunkOnFailure=False, warnOnFailure=True, logfile='dpkg')
              ], workdir="build/debs/opencast")
#TODO: Push built bits to someplace convenient
#TODO: Build RPMs
#TODO: Make junit, cobertura, site all available

f_build = util.BuildFactory()
f_build.addStep(checkout)
f_build.addStep(prep)
f_build.addStep(build)

f_fullBuild = util.BuildFactory()
f_fullBuild.addStep(checkout)
f_fullBuild.addStep(prep)
f_fullBuild.addStep(build)
#TODO: Trigger reports, debs, rpms

f_reports = util.BuildFactory()
f_reports.addStep(checkout)
f_reports.addStep(prep)
f_reports.addStep(cobertura)
f_reports.addStep(site)

f_package_debs = util.BuildFactory()
f_package_debs.addStep(debChecker)
f_package_debs.addStep(debsClone)
f_package_debs.addStep(debsUpdate)
f_package_debs.addStep(debsBuild)

f_package_rpms = util.BuildFactory()
#TODO: Add steps to build the RPMs

def create_branch_builders(branchname):

  b_build = util.BuilderConfig(name=branchname + " Build",
        workernames=worker_names,
        factory=f_build, collapseRequests=True)

  b_nightly = util.BuilderConfig(name=branchname + " Nightly",
        workernames=worker_names,
        factory=f_fullBuild, collapseRequests=True)

  b_reports = util.BuilderConfig(name=branchname + " Reports",
        workernames=worker_names,
        factory=f_reports, collapseRequests=True)

  b_package_debs = util.BuilderConfig(name=branchname + " Debian Packaging",
        workernames=worker_names,
        factory=f_package_debs, collapseRequests=True)

  b_package_rpms = util.BuilderConfig(name=branchname + " RPM Packaging",
        workernames=worker_names,
        factory=f_package_rpms, collapseRequests=True)

  return [ b_build, b_nightly ]#, b_reports, b_package_debs ]#, b_package_rpms ]


c['builders'] = []
for branch in ['3.x', 'Develop']:
  c['builders'].extend(create_branch_builders(branch))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Opencast"
c['titleURL'] = "https://bitbucket.org/opencast-community/opencast.git"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://{{ inventory_hostname }}:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
