---

- include: debian.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- include: centos.yml
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Update Python pip
  pip:
    name: "{{ item }}"
    virtualenv: "{{ buildbot_base }}"
    state: latest
  become: yes
  with_items:
    - pip

- name: Install BuildBot Python level dependencies
  pip:
    name: "{{ item }}"
    virtualenv: "{{ buildbot_base }}"
    state: latest
  become: yes
  with_items:
    - buildbot-worker

- name: Create BuildBot user
  user:
    name: '{{ buildbot_user }}'
    password: '$6$rounds=656000$wuuAoKugbM31ca7G$4ixDGH6.G54ZLIfepc4LhiNsV5UUxeXdfh/3fFhjrsvW3Jg9CgjsMta66hcM/41AptJoTq0wX1ebN03k.2hso/'
    update_password: always
    home: "{{ buildbot_home }}"
    shell: /sbin/nologin
  become: yes
  when: create_buildbot_user

- name: Ensure BuildBot parent directory exists and has the right permissions
  file:
    state: directory
    path: "{{ buildbot_home }}"
    owner: "{{ buildbot_user }}"
    group: "{{ buildbot_user }}"
    recurse: yes
  become: yes

- name: Create BuildBot worker instance
  shell: "{{ buildbot_create_worker }}"
  args:
    chdir: "{{ buildbot_home }}"
  become: yes
  become_user: "{{ buildbot_user }}"

- name: Get Buildbot master sshd server key
  local_action: shell rm -f .ssh/known_hosts && ssh-keyscan {{ groups['master'][0] }} >> .ssh/known_hosts

- name: Create Buildbot SSH key directory
  file:
    path: "{{ item }}"
    state: directory
  become: yes
  become_user: "{{ buildbot_user }}"
  with_items:
    - .ssh

- name: Ensuring root has appropriate known hosts entries so autossh works
  known_hosts:
    name: "{{ groups['master'][0] }}"
    key: "{{ lookup('file', '.ssh/known_hosts') }}"
    state: present
  become: yes

- name: Push BuildBot SSH keys
  copy:
    src: "{{ item }}"
    dest: "{{ item }}"
    mode: 0600
    force: yes
  become: yes
  become_user: "{{ buildbot_user }}"
  with_items:
    - .ssh/

- name: Template BuildBot worker configuration
  template:
    src: "{{ item }}"
    dest: "{{ buildbot_base }}/info/{{ item }}"
    owner: "{{ buildbot_user }}"
    force: yes
  become: yes
  become_user: "{{ buildbot_user }}"
  with_items:
    - admin
    - host

- name: Template autossh systemd unit file
  template:
    src: autossh.service
    dest: /etc/systemd/system/autossh.service
    force: yes
    owner: root
    group: root
  notify: "Start autossh"

- name: Template Buildbot worker systemd unit file
  template:
    src: buildbot-worker.service
    dest: /etc/systemd/system/buildbot-worker.service
    force: yes
    owner: root
    group: root
  notify: "Start BuildBot worker"
