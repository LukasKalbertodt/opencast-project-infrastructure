proxy_cache_path /var/lib/nginx/cache levels=1:2
                                      keys_zone=maven_cache:10m
                                      max_size=10g inactive=1M
                                      use_temp_path=off;
server {
    listen 80;
    server_name {{ inventory_hostname }};

    root html;
    index index.html index.htm;

        proxy_set_header HOST $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
        proxy_set_header X-Forwarded-Server  $host;
        proxy_set_header X-Forwarded-Host  $host;

    location /nexus {
        # Use a specific caching zone for this proxy. The zone is defined in
        # proxy_cache_path.
        proxy_cache maven_cache;

        # Proxy to a specific host
        proxy_pass https://nexus.opencast.org;

        # Ensure we do not redirect to nexus.opencast.org
        proxy_redirect http://nexus.opencast.org https://$host;
        proxy_redirect https://nexus.opencast.org https://$host;

        # Cache GET and HEAD requests
        proxy_cache_methods GET HEAD;

        # Use stale caches whenever possible if there seems to be an upstream
        # error so that repository will work even if upstream is down.
        # Additionally, use the stale files if an asset is just being updated.
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

        # Cache successful retrieved files for a long time (a month) before
        # updating them. Usually, we should always be able to retieve files from
        # upstream again, hence I am updating this once a month. If you are not
        # so sure about that, set it to several years (centuries?)
        proxy_cache_valid 200 1M;

        # Do not cache non-200 responses
        proxy_cache_valid any 0;

        # Since we are caching artifacts for a long time, it may make sense to
        # not cache everything as soon as it is requested once (e.g. for testing)
        # but only cache artifacts which are requested fairly regularly. For
        # example, this will require an artifact to be requested three times
        # before it is cached.. That should happen pretty fast with artifacts
        # actually used in production.
        proxy_cache_min_uses 3;

        # To reduce traffic, this can be set to only retrieve an asset once if it
        # requested and make all other people requesting the same artifact wait
        # until the first process has finished. This may reduce the speed for
        # initial requests (except for the first one) but reduces the bandwith
        # used. This should be no problem if your artifacts are reasonable small.
        proxy_cache_lock on;

        # This allows starting a background subrequest to update an expired
        # asset, while a stale cached response is returned to the client.  Note
        # that this requires Nginx version 1.11.10.
        proxy_cache_background_update on;
    }
}
