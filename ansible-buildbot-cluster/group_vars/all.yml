---

#########################
# User Related Settings #
#########################

#Which user to login as
login_user: root

#Set this to false if you already have a user set up, make sure to update buildbot_user
create_buildbot_user: True

#The buildbot user's name
buildbot_user: buildbot

#The buildbot user's home directory
buildbot_home: /opt/buildbot


#################
# Deb and RPM Repo Settings #
#################

#The hostname of the package repository
repo_host: pkg.opencast.org
#The package repository suite to install from
repo_suite: stable

#The RPM repo urls
oc_rpm_repo_url: "https://pkg.opencast.org/rpms/release/el/7/x86_64"
oc_rpm_repo_url_noarch: "https://pkg.opencast.org/rpms/release/el/7/noarch"
oc_rpm_repo_url_testing: "https://pkg.opencast.org/rpms/testing/el/7/x86_64"
oc_rpm_repo_url_noarch_testing: "https://pkg.opencast.org/rpms/testing/el/7/noarch"

#The DEB gpg key
oc_deb_repo_key: https://pkg.opencast.org/gpgkeys/opencast-deb.key
oc_deb_repo_key_id: 9A7EA8E5B3820B26

#The RPM gpg key
oc_rpm_repo_key: https://pkg.opencast.org/gpgkeys/opencast-el7-rpm.opencast.org.key


#################################
# Docker image related settings #
#################################

docker_image_user: "opencast"

docker_image_master: "ocqa-buildbot-master"

docker_image_worker: "ocqa-deb9-worker"


#####################
# BuildBot Settings #
#####################

#The Opencast repository URL
source_repo_url: "https://github.com/{{ source_pr_owner }}/{{ source_pr_repo }}.git"

#The pull request source's owner
source_pr_owner: "opencast"

#The pull request sources' repository name
source_pr_repo:  "opencast"

#How long a set of changes needs to be in place prior to starting a build (in seconds)
stability_limit: 300

#Where to fetch the debian packaging build files from
source_deb_repo_url: "https://github.com/gregorydlogan/debian-packaging.git"

#Who to send status mails to
mail_to: "dev@opencast.org"

#Set this to true to enable polling, instead of using a webhook
enable_polling: False

#Time between SCM polls (in minutes)
poll_interval: 10

#Number of days to keep artifacts around.  Note that this does *not* check against the available disk space!
keep_artifacts: 15


#######################
# Networking Settings #
#######################

#Which port to run buildbot on
buildbot_port: 8010

#Set this to true to configure nginx, false to do it manually
config_nginx: True


##################
# Path Fragments #
##################

#URI fragments defining where things should end up, relative to a given root directory/URL
artifacts_fragment: "%(prop:branch_pretty)s/%(prop:got_revision)s"
reports_fragment: "{{ artifacts_fragment }}/reports"
javadocs_fragment: "{{ artifacts_fragment }}/javadocs"
markdown_fragment: "{{ artifacts_fragment }}/markdown"
coverage_fragment: "{{ artifacts_fragment }}/coverage"
debs_fragment: "{{ artifacts_fragment }}/debs"
rpms_fragment: "{{ artifacts_fragment }}/rpms"


#################
# URL Settings #
#################

#Where Builbot lives, relative to the webserver root.  Leave this alone to have http://$servername/ be buildbot
#String needs to start with a non-slash, and end with a slash (ie, buildbot/, not /buildbot or /builtbot/)
buildbot_url: ""

#Build url base
url_base: /builds


#Build url with build properties
artifacts_url: "{{ url_base }}/{{ artifacts_fragment }}"

#Build url for the reports
reports_url: "{{ url_base }}/reports/%(prop:branch_pretty)s"
#Build url for the debs
debs_url: "{{ url_base }}/{{ debs_fragment }}"
#Build url for the rpms
rpms_url: "{{ url_base }}/{{ rpms_fragment }}"


#################
# Disk Settings #
#################

#Where the buildbot install lives
buildbot_base: "{{ buildbot_home }}"

#Where the master config file lives
buildbot_master_config: "{{ buildbot_base }}/master.cfg"

#Where built artifacts of all types live
disk_base: /var/www/buildbot


#Build location on master filesystem
artifacts_dist_base: "{{ disk_base }}/{{ artifacts_fragment }}"

#The location on disk to deploy the reports to
deployed_reports: "{{ disk_base }}/{{ reports_fragment }}"

#The location on disk to where the report symlinks live
deployed_reports_symlink_base: "{{ disk_base }}/reports"

#The interpolatable location for each symlink
deployed_reports_symlink: "{{ deployed_reports_symlink_base }}/%(prop:branch_pretty)s"

#The location on disk to deploy the markdown docs to
deployed_markdown: "{{ disk_base }}/{{ markdown_fragment }}"

#The location on disk to deploy the coverage report to
deployed_coverage: "{{ disk_base }}/{{ coverage_fragment }}"

#The location on disk to deploy the debs to
#Note that this is using the *parent* dist base
deployed_debs: "{{ disk_base }}/{{ debs_fragment }}"

#The location on disk to deploy the debs to
#Note that this is using the *parent* dist base
deployed_rpms: "{{ disk_base }}/{{ rpms_fragment }}"

#The location where the javadocs live on disk
deployed_javadocs: "{{ deployed_reports }}/apidocs"

#The location of the symlink to make it easier to get to the javadocs
deployed_javadocs_symlink: "{{ disk_base }}/{{ javadocs_fragment }}"


#####################
# Buildbot Commands #
#####################

#Don't change these, change the paths and whatnot above

#What to run to create the base master
buildbot_create_master: "{{ buildbot_base }}/bin/buildbot create-master {{ buildbot_base }}"

#What to run to apply the master config
buildbot_apply: "{{ buildbot_base }}/bin/buildbot reconfig {{ inventory_hostname }}"

#What to run to create a worker, note that we're assuming SSH tunnels are in use!
buildbot_create_worker: "{{ buildbot_base }}/bin/buildbot-worker create-worker {{ inventory_hostname }} localhost {{ id }} {{ password }}"

#Where to push builds on the master
buildbot_scp_builds: "{{ hostvars[groups['master'][0]]['buildbot_user'] }}@{{ groups['master'][0] }}:{{ artifacts_dist_base }}"

#Where to push reports on the master
buildbot_scp_reports: "{{ hostvars[groups['master'][0]]['buildbot_user'] }}@{{ groups['master'][0] }}:{{ deployed_reports }}"

#Where to push reports on the master
buildbot_scp_javadocs: "{{ hostvars[groups['master'][0]]['buildbot_user'] }}@{{ groups['master'][0] }}:{{ deployed_javadocs }}"

#Where to push reports on the master
buildbot_scp_markdown: "{{ hostvars[groups['master'][0]]['buildbot_user'] }}@{{ groups['master'][0] }}:{{ deployed_markdown }}"

#Where to push coverage reports on the master
buildbot_scp_coverage: "{{ hostvars[groups['master'][0]]['buildbot_user'] }}@{{ groups['master'][0] }}:{{ deployed_coverage }}"

#Where to push PR coverage reports on the master
buildbot_scp_PR_coverage: "{{ hostvars[groups['master'][0]]['buildbot_user'] }}@{{ groups['master'][0] }}:{{ deployed_PR_coverage }}"

#Where to push built debs on the master
buildbot_scp_debs: "{{ hostvars[groups['master'][0]]['buildbot_user'] }}@{{ groups['master'][0] }}:{{ deployed_debs }}"

#Where to push built rpms on the master
buildbot_scp_rpms: "{{ hostvars[groups['master'][0]]['buildbot_user'] }}@{{ groups['master'][0] }}:{{ deployed_rpms }}"


#############
# Auth bits #
#############

#The OAth bits.  These are used to power the login side of things for GitHub
#These don't need to be right for testing, you just won't be able to log in
#These are set here so the playbooks don't fail, but should be overridden in the host vars
github_client_id: FAKE_ID
github_client_secret: FAKE_SECRET

#Your GitHub webook needs to look like this:
#http://{{ github_hook_user }}:{{ github_hook_pass }}@{{ inventory_hostname }}/change_hook/github

#These are strings for the GitHub webhook auth, see the bottom of https://docs.buildbot.net/latest/manual/cfg-wwwhooks.html#github-hook
github_hook_user: FAKE_USER
github_hook_pass: FAKE_PASS

#The secret used by the webhook
github_hook_secret: FAKE_SECRET

#The token used by the pullrequest poller, only needed if you have set enable_polling to true
#Note that this token is on a per-account level, so you probably need to create machine account for your github repo
github_token: FAKE_TOKEN

#The credentials to use when installing the workers.  This is used to get an appropriate version of ffmpeg from the repo
#These are defined here, but need to be overridden in the host vars
repo_username: FAKE_USERNAME
repo_password: FAKE_PASSWORD
